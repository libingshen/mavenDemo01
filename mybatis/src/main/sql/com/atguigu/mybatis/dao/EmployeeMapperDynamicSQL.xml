<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.dao.EmployeeMapperDynamicSQL">

    <!--
        参考：
        http://www.mybatis.org/mybatis-3/zh/dynamic-sql.html

        if
        choose (when, otherwise)：分支选择：带了break的switch case
            如果带了id就用id查，如果带了lastName就用lastName查，只会进入其中一个
        trim (where(封装查询条件), set（封装修改条件）)
        foreach
    -->
    <!---->
    <resultMap id="MyEmp" type="com.atguigu.mybatis.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
    </resultMap>
    <!--查询员工，要求，携带了哪个字段查询条件就带上这个字段的值
    public List<Employee> getEmpsByConditionIf(Employee employee);-->
    <select id="getEmpsByConditionIf" resultMap="MyEmp">
        select * from tbl_employee
        <!--where 1=1-->
        <!--
            test:判断表达式（OGNL）
            OGNL参考PPT或者官方文档
            http://commons.apache.org/proper/commons-ognl/language-guide.html

                c:if    test
            从参数中取值进行判断

            遇见特殊符号应该去写转义字符
        -->

        <!--
            //查询的时候如果某些条件没带可能拼装SQL会有问题
            解决：
                1、给where后面加上1=1，以后的条件都and xxx
                2、mybatis使用where标签来将所有的查询条件包括在内。mybatis就会将where标签中拼装的SQL，多出来的and或者or去掉。

            新的问题：
                where标签只会去掉第一个多出来的and或者or，如果and写在后面会有问题
             解决：使用trim

        -->
        <where>
            <if test="id!=null">
                id=#{id}
            </if>
            <if test="lastName!=null and lastName!=&quot;&quot;">
                and last_name like #{lastName}
            </if>
            <if test="email!=null and email.trim()!=&quot;&quot;">
                AND email=#{email}
            </if>
            <!--ognl会进行字符串与数字的转换判断"0"==0-->
            <if test="gender==0 or gender==1">
                and gender=#{gender}
            </if>
        </where>
    </select>

    <!--//动态查询条件，测试trim
    public List<Employee> getEmpsByConditionTrim(Employee employee);-->
    <select id="getEmpsByConditionTrim" resultMap="MyEmp">
        select * from tbl_employee
        <!--
            后面多出来的and或者or，where标签不能解决，须使用trim进行截取
            prefix="":前缀：trim标签体中是整个字符串拼串 后的结果。
	 			prefix给拼串后的整个字符串加一个前缀
            prefixOverrides="":
                    前缀覆盖： 去掉整个字符串前面多余的字符
            suffix="":后缀
                    suffix给拼串后的整个字符串加一个后缀
            suffixOverrides=""
                    后缀覆盖：去掉整个字符串后面多余的字符

        -->
        <!--自定义截取规则-->
        <trim prefix="where" suffixOverrides="and">
            <if test="id!=null">
                id=#{id} and
            </if>
            <if test="lastName!=null and lastName!=&quot;&quot;">
                last_name like #{lastName} and
            </if>
            <if test="email!=null and email.trim()!=&quot;&quot;">
                email=#{email} and
            </if>
            <!--ognl会进行字符串与数字的转换判断"0"==0-->
            <if test="gender==0 or gender==1">
                gender=#{gender}
            </if>
        </trim>
    </select>


    <!--//动态查询条件，测试choose
    public List<Employee> getEmpsByConditionChoose(Employee employee);-->
    <select id="getEmpsByConditionChoose" resultMap="MyEmp">
        select * from tbl_employee
        <where>
            <!-- 如果带了id就用id查，如果带了lastName就用lastName查，只会进入其中一个-->
            <choose>
                <when test="id!=null">
                    id=#{id}
                </when>
                <when test="lastName!=null">
                    last_name like #{lastName}
                </when>
                <when test="email!=null">
                    email=#{email}
                </when>
                <otherwise>
                    gender=0
                </otherwise>
            </choose>
        </where>
    </select>

    <!--//动态修改条件，更新员工
    public void updateEmp(Employee employee);-->
    <update id="updateEmp">
        <!-- Set标签的使用-->
        update tbl_employee
        <set>
            <if test="lastName!=null">
                last_name=#{lastName},
            </if>
            <if test="email!=null">
                email=#{email},
            </if>
            <if test="gender!=null">
                gender=#{gender}
            </if>
        </set>
        where id=#{id}

        <!--
        trim标签更新拼串
            update tbl_employee
        <trim prefix="set" suffixOverrides=",">
            <if test="lastName!=null">
                last_name=#{lastName},
            </if>
            <if test="email!=null">
                email=#{email},
            </if>
            <if test="gender!=null">
                gender=#{gender}
            </if>
        </trim>
        where id=#{id}
        -->
    </update>

    <!--//根据封装好的多个员工id查询，结果集封装在给定集合中的
    public List<Employee> getEmpsByConditionForeach(@Param("ids")List<Integer> ids);-->
    <select id="getEmpsByConditionForeach" resultMap="MyEmp">
        select * from tbl_employee where id in
        <!--
            collection：指定要遍历的集合：
                list类型的参数会特殊处理封装在map中，map的key就叫list
            item：将当前遍历出的元素赋值给指定的变量
            separator:每个元素之间的分隔符
            open：遍历出所有结果拼接一个开始的字符
            close:遍历出所有结果拼接一个结束的字符
            index:索引。遍历list的时候是index就是索引，item就是当前值
                          遍历map的时候index表示的就是map的key，item就是map的值

            #{变量名}就能取出变量的值也就是当前遍历出的元素
          -->
        <!--<foreach collection="ids" item="item_id" separator=","
                 open="where id in(" close=")">
            #{item_id}
        </foreach>-->
        <foreach collection="ids" item="item_id" separator=","
                 open="(" close=")">
            #{item_id}
        </foreach>
    </select>

    <!--//批量保存员工
    public void addEmps(@Param("emps") List<Employee> employees);-->
    <!--MySQL下批量保存：可以foreach遍历   mysql支持values(),(),()语法-->
    <insert id="addEmps">
        INSERT INTO tbl_employee(last_name,email,gender,d_id)
        VALUES
        <foreach collection="emps" separator="," item="emp">
            (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
        </foreach>
    </insert>
    <!-- 这种方式需要数据库连接属性allowMultiQueries=true；
	 	这种分号分隔多个sql可以用于其他的批量操作（删除，修改） -->
    <insert id="addEmps">
        <foreach collection="emps" item="emp" separator=";">
            insert into tbl_employee(last_name,email,gender,d_id)
            values(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
        </foreach>
    </insert>


    <!-- Oracle数据库批量保存：
	 	Oracle不支持values(),(),()
	 	Oracle支持的批量方式
	 	1、多个insert放在begin - end里面
	 		begin
			    insert into employees(employee_id,last_name,email)
			    values(employees_seq.nextval,'test_001','test_001@atguigu.com');
			    insert into employees(employee_id,last_name,email)
			    values(employees_seq.nextval,'test_002','test_002@atguigu.com');
			end;
		2、利用中间表：
			insert into employees(employee_id,last_name,email)
		       select employees_seq.nextval,lastName,email from(
		              select 'test_a_01' lastName,'test_a_e01' email from dual
		              union
		              select 'test_a_02' lastName,'test_a_e02' email from dual
		              union
		              select 'test_a_03' lastName,'test_a_e03' email from dual
		       )
	 -->
    <insert id="addEmps" databaseId="oracle">
        <!-- oracle第一种批量方式 -->
        <!-- <foreach collection="emps" item="emp" open="begin" close="end;">
            insert into employees(employee_id,last_name,email)
               values(employees_seq.nextval,#{emp.lastName},#{emp.email});
        </foreach> -->

        <!-- oracle第二种批量方式  -->
        insert into employees(
        <!-- 引用外部定义的sql -->
        <include refid="insertColumn">
            <property name="testColomn" value="abc"/>
        </include>
        )
        <foreach collection="emps" item="emp" separator="union"
                 open="select employees_seq.nextval,lastName,email from("
                 close=")">
            select #{emp.lastName} lastName,#{emp.email} email from dual
        </foreach>
    </insert>
</mapper>